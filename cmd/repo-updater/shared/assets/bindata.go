// Code generated by go-bindata. DO NOT EDIT.
// sources:
// state.html.tmpl (4.714kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stateHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xeb\x73\xe2\x38\x12\xff\x9e\xbf\xa2\xcf\xb5\x5b\xfb\xc8\xda\xe2\x99\x4c\x72\x86\x9a\x6c\x1e\x1b\xb2\x93\x64\x12\x92\xec\x64\xae\xee\x83\xb0\x1b\x2c\x90\x25\x8f\xd4\x86\x10\x8a\xff\xfd\xca\x36\x10\x98\x01\x36\x73\x5b\x75\x77\x75\x35\xfa\x82\x25\xb5\xfa\xf9\xeb\x6e\x24\xff\x6f\xa1\x0e\x68\x9c\x20\x44\x14\xcb\xe6\x8e\x9f\xfd\x80\xe4\xaa\xd7\x70\x50\x39\xcd\x9d\x1d\x3f\x42\x1e\x36\x77\x00\x00\x7c\x12\x24\xb1\x69\x30\xd1\x6e\x9a\x84\x9c\xd0\xb8\x96\x38\xa1\xcf\x8a\x9d\x82\x4a\x0a\x35\x00\x83\xb2\xe1\x58\x1a\x4b\xb4\x11\x22\x39\x10\x19\xec\x36\x9c\x88\x28\xb1\x87\x8c\x59\xe2\xc1\x20\xe1\x14\x79\x1d\xad\xc9\x92\xe1\x49\x10\x2a\x2f\xd0\x31\x5b\x2c\xb0\x9a\x57\xf7\x4a\x2c\xb0\xf6\x65\xcd\x8b\x85\xf2\x02\x6b\x1d\x10\x8a\xb0\x67\x04\x8d\x1b\x8e\x8d\x78\xf5\x4d\xcd\x3d\xe0\x2d\xaa\xa8\xdb\xe4\xb8\x5c\xb9\x1f\x1c\xf4\xda\x07\x1d\x7e\x22\x6b\xe5\xf2\xd5\xcd\x51\x72\x16\x1f\x57\xf6\x4e\x47\x47\xd7\xe7\x6f\xfe\xe8\x7d\x94\xf5\xcb\xc7\xc7\xa7\xb3\x6e\xb0\x7b\x15\xbc\xef\x94\xc3\xdf\x7f\xeb\xef\xb7\x07\x0e\x04\x46\x5b\xab\x8d\xe8\x09\xd5\x70\xb8\xd2\x6a\x1c\xeb\xd4\x3a\x5f\x61\x57\x66\x44\xdf\x86\x28\xc5\xd0\x78\x0a\x89\xa9\x24\x66\x6f\xbb\xda\x10\x1f\xa1\xd5\x31\xb2\xae\x56\xf3\x6f\xb7\x6b\x10\xdf\xd6\xbd\x72\x6d\x66\x26\x97\x72\x61\xe0\x4c\x68\x2e\xaa\xf8\xce\x86\xd7\xb1\x2e\x69\x2d\x49\x24\x6e\x47\x13\xe9\x18\xbc\xf9\x5c\x28\x85\x06\x26\x0b\xda\x6c\xc4\xfc\xc9\x1d\x89\x90\xa2\x43\x28\x97\x4a\xdf\xff\x7d\xb1\x39\x2d\xd8\xb3\x19\x7f\x9f\x15\x61\xde\xf1\x3b\x3a\x1c\xcf\x64\x87\x62\x08\x81\xe4\xd6\x36\x9c\x20\xd3\x5a\x28\x34\xce\x8b\x2e\x93\xc9\x77\x36\x88\x30\x4c\x25\x9a\x93\x34\x4e\xe0\xb0\x01\x42\x85\xf8\x04\x1e\x94\xa6\x53\x98\x4c\xd8\xcf\x10\x72\xe2\xa0\x3b\x7d\x0c\x08\x84\x05\x0e\x52\x58\x02\xdd\x85\x10\x3b\x69\x0f\xc2\x34\x4e\x2c\xfc\xcc\xa6\xd3\x05\xdb\x65\xb1\x31\xb9\x75\x18\xb9\x07\xac\x5c\x59\x12\x9c\x53\x45\xb5\x05\x51\xc7\xad\x3a\xcd\xf6\x4c\x15\x9f\x45\xb5\xcf\x48\x93\xd5\x79\x36\xee\x22\x84\xb9\xf2\x99\x36\xa3\x08\x15\x64\xc0\xb6\x82\xb4\x11\x68\xa1\x87\x04\xa8\x3e\xa5\x98\x62\x98\x81\x4d\x03\x45\x08\xf7\x39\xec\xe1\x26\x5b\xf6\x56\xa5\xb0\xcf\xc4\xf8\xc4\x3b\x12\xe7\x4a\x16\x13\xc2\x27\x72\x25\x76\x09\x62\x72\x6b\xce\x97\x7a\xf9\x94\xc5\x61\x71\x28\x9b\xb8\x52\xf4\x22\x5a\x4b\x6b\xbe\x5c\x9c\x31\x81\x3c\xae\x0d\x67\x11\xfb\xef\x9d\x66\xeb\xc4\x67\x14\xbd\xf6\x48\x2d\x3b\x72\xc5\x63\xdc\x7a\x68\xfd\x46\xbe\x69\x13\xae\x9a\x33\x7f\xb5\x14\xa1\x19\x72\xe9\xb3\x7c\x75\xf3\x21\x31\x37\xbd\xcb\x2d\x74\xb9\x2b\x54\x57\xbb\x81\x30\x81\x44\x88\xc7\x2e\x4f\x49\x43\x2c\xdd\xaa\x93\x03\xcb\x25\xdd\xeb\x65\x3a\xcf\x52\xc0\xd9\xc8\x18\x00\xf2\x12\xd5\x70\x8e\xb9\x0c\x52\xc9\x09\x43\xe8\x70\x8b\x21\x68\x95\x47\x96\x44\x8c\x40\x11\x27\x88\xb8\x05\x94\x3c\xc9\x36\xad\x50\x01\xe6\xfb\x92\x5b\x82\x40\xc7\xb1\xa0\x5f\x20\x14\x43\x11\x66\x1c\xc6\xc0\x21\xd0\xca\x12\x57\x04\x5d\x1e\x90\x36\x19\x9c\x2a\xde\x66\x55\xd8\x06\x67\x6e\x75\xf3\x15\x3e\xd1\x0c\x7c\xeb\x09\x7d\xb6\x0e\x0d\x19\xed\xa2\x7c\xaf\xf2\x7c\xc9\xf3\xe5\x31\x99\x18\xae\x7a\x08\xab\x99\xed\xcd\x93\x6b\x29\x4d\x57\xb9\x6d\x40\x62\xb1\x19\x36\x27\x13\xef\x16\x13\xed\xb5\x4e\xa6\x53\x9f\xd1\x1a\x85\x96\xa9\xb7\x45\x11\x7c\x3e\x2b\xb9\x73\x9e\xf7\xb7\xef\xa6\xd3\xad\x91\xcf\xc6\x5a\xb8\x14\xab\x89\xe4\x01\xc6\xa8\xa8\xe1\x14\x25\xd5\x99\x63\x65\x55\xc4\x76\xbd\x20\xf7\x5e\x41\x9f\xa5\xcd\x06\x57\x2d\xcc\x60\x7c\x8b\x13\xfe\xd4\x45\x93\x09\x99\x54\x05\x9c\xf0\x24\x35\x9c\x84\x56\xe0\xcd\x93\xec\x35\x2e\x9e\x4c\xbc\x93\x14\xbd\x33\x6d\x62\x4e\xe0\x5c\x6a\xf5\x0b\x94\x2a\x70\xc1\x15\x54\x4a\xa5\x3d\x28\xd7\x0f\x4b\xb5\xc3\x52\x1d\x2e\xdb\x77\xce\x36\x86\xeb\x71\x37\x99\xa0\xb4\xff\x2e\x5a\x20\xd0\x32\x2b\x13\x0d\xa7\x5c\x2a\x39\x8b\x5a\x98\x95\xce\x00\x33\x1b\xff\x24\x12\x7e\x32\x3f\xc3\x25\x1a\x72\x9a\x57\x7a\xb5\xb4\x0b\xb5\xa8\xfd\x5f\x54\xed\xcf\x6c\xfb\x5a\xab\x55\xb8\xc6\x68\x9f\xad\xc9\x36\x9f\xe5\x2d\xe1\x65\xd1\x67\xa1\x18\x36\xff\x6a\x1b\x5c\x6e\x50\xaf\x6b\x85\x47\x90\x18\xa1\xb3\x7f\x52\x90\x77\xbb\xac\x7e\xad\xb8\x8b\x34\x14\xff\xf6\xbc\x35\x67\x47\xda\x0c\xd0\x64\x35\x90\x84\x4a\x75\x6a\xe5\x18\x42\xcc\x19\xd9\xac\x6e\xc6\xc0\x55\x08\x16\x55\x68\x67\x5c\x72\x86\x3d\x41\x16\xcd\x10\xcd\xb7\x26\x4a\x51\x11\x34\xa1\x7a\xdb\xa9\xde\xcf\xc2\xb4\x9d\xaa\x9d\x39\x5f\x05\xff\x95\x36\x51\x80\x2f\xc7\xde\xb7\x4e\xb1\x75\xfc\x27\x3b\x85\x37\x87\xd7\x2b\x1b\xc3\x1c\x67\xaf\x24\x6f\xe3\xa7\xff\xc3\x06\xf1\xa9\x28\xa0\xff\x8b\xdd\x61\xf9\xd3\x06\x46\x24\x04\xd6\x04\x4b\x77\x50\x1d\xa2\xd7\xff\x94\xa2\x19\xe7\x17\xea\xe2\xd3\xad\x7a\x75\xaf\xec\x59\x29\xe2\xfc\x8e\xd9\x5f\x7b\x87\x3e\xe9\x7e\x08\x9f\x2b\x11\xbd\x3f\x2f\x49\xdb\x6e\xdb\xba\x3a\xbe\x4b\xd2\x3e\x7b\x1e\xd7\x8e\x77\xaf\x7f\x4b\x78\xac\xcf\x1e\xc6\xd5\x37\x97\x0f\xbf\xaa\xd3\xdd\x56\xa7\xf3\xf0\x78\x8f\xa3\xdd\x6b\x73\xfc\x81\xdf\x0e\xba\xfd\xcd\x77\x68\x9f\x15\xba\x6e\x53\x7c\xdd\xe5\x39\xd1\x49\x82\xc6\xeb\xdb\xb7\x65\xaf\xbc\xe7\x95\x58\x28\x2c\xb1\x34\x0e\xe7\x3b\x9b\x8d\xb9\xd9\x3b\x3d\xb8\x3d\x1f\x76\x5a\xe3\x8f\x67\x17\xba\x4b\xbb\x95\xf8\xa2\x73\xce\x4f\xff\x90\xa1\x1c\xb6\x0e\x5a\xd7\x8f\xe3\xba\xaa\x3e\x3f\x1c\x3c\x3f\xdf\x51\xdc\xaa\xde\x0f\x6c\x78\x73\xfb\x30\xd4\x4f\x97\x5d\xad\x8f\xf4\x5f\x32\xe6\x2b\x5e\x38\xfa\x9f\x3f\x70\xac\x37\xe7\xba\xf7\x70\x3b\x4c\x8f\xee\xde\x97\x9f\xf7\x2f\xfa\xe7\xef\x06\xe9\xf5\xfd\xfe\x87\xd1\x7e\xa9\xb6\x1b\xbd\xa9\xd6\xdf\x99\xdd\xbd\x9b\x77\x07\xf7\xc3\xc7\xfe\xc7\xd3\x6a\x2b\x49\xf7\xee\x92\xfd\x7a\x7f\xff\xd7\x88\x0d\x6e\x4b\x17\xbf\xb7\xbe\xd2\x9c\x17\xec\x7d\xf7\xe3\x0f\xff\x58\x5b\x15\xff\xf9\xc3\x4f\xf3\xd7\x87\x1f\x7f\x9a\x3f\x28\xcc\x0e\xfb\xac\x40\xb5\xcf\x8a\x97\xa5\x7f\x05\x00\x00\xff\xff\x49\xe0\x63\xcf\x6a\x12\x00\x00")

func stateHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_stateHtmlTmpl,
		"state.html.tmpl",
	)
}

func stateHtmlTmpl() (*asset, error) {
	bytes, err := stateHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "state.html.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0xe1, 0x1e, 0x19, 0x6c, 0x1c, 0x8d, 0xd8, 0x20, 0xa1, 0x47, 0xd8, 0x8a, 0x73, 0x40, 0x5e, 0xc6, 0xb5, 0xd8, 0xea, 0xda, 0xff, 0x77, 0x3d, 0x94, 0x87, 0xb2, 0x74, 0x1, 0x58, 0xaf, 0xb7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"state.html.tmpl": stateHtmlTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"state.html.tmpl": {stateHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
