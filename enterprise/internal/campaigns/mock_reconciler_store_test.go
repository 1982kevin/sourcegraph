// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package campaigns

import (
	"context"
	campaigns "github.com/sourcegraph/sourcegraph/internal/campaigns"
	basestore "github.com/sourcegraph/sourcegraph/internal/db/basestore"
	"sync"
)

// MockReconcilerStore is a mock implementation of the ReconcilerStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/campaigns) used
// for unit testing.
type MockReconcilerStore struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ReconcilerStoreDoneFunc
	// GetCampaignFunc is an instance of a mock function object controlling
	// the behavior of the method GetCampaign.
	GetCampaignFunc *ReconcilerStoreGetCampaignFunc
	// GetCampaignSpecFunc is an instance of a mock function object
	// controlling the behavior of the method GetCampaignSpec.
	GetCampaignSpecFunc *ReconcilerStoreGetCampaignSpecFunc
	// GetChangesetFunc is an instance of a mock function object controlling
	// the behavior of the method GetChangeset.
	GetChangesetFunc *ReconcilerStoreGetChangesetFunc
	// GetChangesetSpecByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetChangesetSpecByID.
	GetChangesetSpecByIDFunc *ReconcilerStoreGetChangesetSpecByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ReconcilerStoreHandleFunc
	// ListChangesetSyncDataFunc is an instance of a mock function object
	// controlling the behavior of the method ListChangesetSyncData.
	ListChangesetSyncDataFunc *ReconcilerStoreListChangesetSyncDataFunc
	// ListChangesetsFunc is an instance of a mock function object
	// controlling the behavior of the method ListChangesets.
	ListChangesetsFunc *ReconcilerStoreListChangesetsFunc
	// TransactSyncStoreFunc is an instance of a mock function object
	// controlling the behavior of the method TransactSyncStore.
	TransactSyncStoreFunc *ReconcilerStoreTransactSyncStoreFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ReconcilerStoreUpdateChangesetFunc
	// UpsertChangesetEventsFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertChangesetEvents.
	UpsertChangesetEventsFunc *ReconcilerStoreUpsertChangesetEventsFunc
}

// NewMockReconcilerStore creates a new mock of the ReconcilerStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockReconcilerStore() *MockReconcilerStore {
	return &MockReconcilerStore{
		DoneFunc: &ReconcilerStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		GetCampaignFunc: &ReconcilerStoreGetCampaignFunc{
			defaultHook: func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error) {
				return nil, nil
			},
		},
		GetCampaignSpecFunc: &ReconcilerStoreGetCampaignSpecFunc{
			defaultHook: func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
				return nil, nil
			},
		},
		GetChangesetFunc: &ReconcilerStoreGetChangesetFunc{
			defaultHook: func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error) {
				return nil, nil
			},
		},
		GetChangesetSpecByIDFunc: &ReconcilerStoreGetChangesetSpecByIDFunc{
			defaultHook: func(context.Context, int64) (*campaigns.ChangesetSpec, error) {
				return nil, nil
			},
		},
		HandleFunc: &ReconcilerStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListChangesetSyncDataFunc: &ReconcilerStoreListChangesetSyncDataFunc{
			defaultHook: func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
				return nil, nil
			},
		},
		ListChangesetsFunc: &ReconcilerStoreListChangesetsFunc{
			defaultHook: func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error) {
				return nil, 0, nil
			},
		},
		TransactSyncStoreFunc: &ReconcilerStoreTransactSyncStoreFunc{
			defaultHook: func(context.Context) (SyncStore, error) {
				return nil, nil
			},
		},
		UpdateChangesetFunc: &ReconcilerStoreUpdateChangesetFunc{
			defaultHook: func(context.Context, *campaigns.Changeset) error {
				return nil
			},
		},
		UpsertChangesetEventsFunc: &ReconcilerStoreUpsertChangesetEventsFunc{
			defaultHook: func(context.Context, ...*campaigns.ChangesetEvent) error {
				return nil
			},
		},
	}
}

// NewMockReconcilerStoreFrom creates a new mock of the MockReconcilerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockReconcilerStoreFrom(i ReconcilerStore) *MockReconcilerStore {
	return &MockReconcilerStore{
		DoneFunc: &ReconcilerStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetCampaignFunc: &ReconcilerStoreGetCampaignFunc{
			defaultHook: i.GetCampaign,
		},
		GetCampaignSpecFunc: &ReconcilerStoreGetCampaignSpecFunc{
			defaultHook: i.GetCampaignSpec,
		},
		GetChangesetFunc: &ReconcilerStoreGetChangesetFunc{
			defaultHook: i.GetChangeset,
		},
		GetChangesetSpecByIDFunc: &ReconcilerStoreGetChangesetSpecByIDFunc{
			defaultHook: i.GetChangesetSpecByID,
		},
		HandleFunc: &ReconcilerStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListChangesetSyncDataFunc: &ReconcilerStoreListChangesetSyncDataFunc{
			defaultHook: i.ListChangesetSyncData,
		},
		ListChangesetsFunc: &ReconcilerStoreListChangesetsFunc{
			defaultHook: i.ListChangesets,
		},
		TransactSyncStoreFunc: &ReconcilerStoreTransactSyncStoreFunc{
			defaultHook: i.TransactSyncStore,
		},
		UpdateChangesetFunc: &ReconcilerStoreUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		UpsertChangesetEventsFunc: &ReconcilerStoreUpsertChangesetEventsFunc{
			defaultHook: i.UpsertChangesetEvents,
		},
	}
}

// ReconcilerStoreDoneFunc describes the behavior when the Done method of
// the parent MockReconcilerStore instance is invoked.
type ReconcilerStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ReconcilerStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReconcilerStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ReconcilerStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockReconcilerStore instance is invoked and the hook queue is
// empty.
func (f *ReconcilerStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockReconcilerStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReconcilerStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ReconcilerStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreDoneFunc) appendCall(r0 ReconcilerStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *ReconcilerStoreDoneFunc) History() []ReconcilerStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockReconcilerStore.
type ReconcilerStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReconcilerStoreGetCampaignFunc describes the behavior when the
// GetCampaign method of the parent MockReconcilerStore instance is invoked.
type ReconcilerStoreGetCampaignFunc struct {
	defaultHook func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error)
	hooks       []func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error)
	history     []ReconcilerStoreGetCampaignFuncCall
	mutex       sync.Mutex
}

// GetCampaign delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReconcilerStore) GetCampaign(v0 context.Context, v1 GetCampaignOpts) (*campaigns.Campaign, error) {
	r0, r1 := m.GetCampaignFunc.nextHook()(v0, v1)
	m.GetCampaignFunc.appendCall(ReconcilerStoreGetCampaignFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCampaign method
// of the parent MockReconcilerStore instance is invoked and the hook queue
// is empty.
func (f *ReconcilerStoreGetCampaignFunc) SetDefaultHook(hook func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCampaign method of the parent MockReconcilerStore instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReconcilerStoreGetCampaignFunc) PushHook(hook func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreGetCampaignFunc) SetDefaultReturn(r0 *campaigns.Campaign, r1 error) {
	f.SetDefaultHook(func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreGetCampaignFunc) PushReturn(r0 *campaigns.Campaign, r1 error) {
	f.PushHook(func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreGetCampaignFunc) nextHook() func(context.Context, GetCampaignOpts) (*campaigns.Campaign, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreGetCampaignFunc) appendCall(r0 ReconcilerStoreGetCampaignFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreGetCampaignFuncCall objects
// describing the invocations of this function.
func (f *ReconcilerStoreGetCampaignFunc) History() []ReconcilerStoreGetCampaignFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreGetCampaignFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreGetCampaignFuncCall is an object that describes an
// invocation of method GetCampaign on an instance of MockReconcilerStore.
type ReconcilerStoreGetCampaignFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetCampaignOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *campaigns.Campaign
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreGetCampaignFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreGetCampaignFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreGetCampaignSpecFunc describes the behavior when the
// GetCampaignSpec method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreGetCampaignSpecFunc struct {
	defaultHook func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error)
	hooks       []func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error)
	history     []ReconcilerStoreGetCampaignSpecFuncCall
	mutex       sync.Mutex
}

// GetCampaignSpec delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) GetCampaignSpec(v0 context.Context, v1 GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
	r0, r1 := m.GetCampaignSpecFunc.nextHook()(v0, v1)
	m.GetCampaignSpecFunc.appendCall(ReconcilerStoreGetCampaignSpecFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCampaignSpec
// method of the parent MockReconcilerStore instance is invoked and the hook
// queue is empty.
func (f *ReconcilerStoreGetCampaignSpecFunc) SetDefaultHook(hook func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCampaignSpec method of the parent MockReconcilerStore instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReconcilerStoreGetCampaignSpecFunc) PushHook(hook func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreGetCampaignSpecFunc) SetDefaultReturn(r0 *campaigns.CampaignSpec, r1 error) {
	f.SetDefaultHook(func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreGetCampaignSpecFunc) PushReturn(r0 *campaigns.CampaignSpec, r1 error) {
	f.PushHook(func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreGetCampaignSpecFunc) nextHook() func(context.Context, GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreGetCampaignSpecFunc) appendCall(r0 ReconcilerStoreGetCampaignSpecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreGetCampaignSpecFuncCall
// objects describing the invocations of this function.
func (f *ReconcilerStoreGetCampaignSpecFunc) History() []ReconcilerStoreGetCampaignSpecFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreGetCampaignSpecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreGetCampaignSpecFuncCall is an object that describes an
// invocation of method GetCampaignSpec on an instance of
// MockReconcilerStore.
type ReconcilerStoreGetCampaignSpecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetCampaignSpecOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *campaigns.CampaignSpec
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreGetCampaignSpecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreGetCampaignSpecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreGetChangesetFunc describes the behavior when the
// GetChangeset method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreGetChangesetFunc struct {
	defaultHook func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error)
	hooks       []func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error)
	history     []ReconcilerStoreGetChangesetFuncCall
	mutex       sync.Mutex
}

// GetChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReconcilerStore) GetChangeset(v0 context.Context, v1 GetChangesetOpts) (*campaigns.Changeset, error) {
	r0, r1 := m.GetChangesetFunc.nextHook()(v0, v1)
	m.GetChangesetFunc.appendCall(ReconcilerStoreGetChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChangeset method
// of the parent MockReconcilerStore instance is invoked and the hook queue
// is empty.
func (f *ReconcilerStoreGetChangesetFunc) SetDefaultHook(hook func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChangeset method of the parent MockReconcilerStore instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReconcilerStoreGetChangesetFunc) PushHook(hook func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreGetChangesetFunc) SetDefaultReturn(r0 *campaigns.Changeset, r1 error) {
	f.SetDefaultHook(func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreGetChangesetFunc) PushReturn(r0 *campaigns.Changeset, r1 error) {
	f.PushHook(func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreGetChangesetFunc) nextHook() func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreGetChangesetFunc) appendCall(r0 ReconcilerStoreGetChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreGetChangesetFuncCall objects
// describing the invocations of this function.
func (f *ReconcilerStoreGetChangesetFunc) History() []ReconcilerStoreGetChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreGetChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreGetChangesetFuncCall is an object that describes an
// invocation of method GetChangeset on an instance of MockReconcilerStore.
type ReconcilerStoreGetChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetChangesetOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *campaigns.Changeset
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreGetChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreGetChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreGetChangesetSpecByIDFunc describes the behavior when the
// GetChangesetSpecByID method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreGetChangesetSpecByIDFunc struct {
	defaultHook func(context.Context, int64) (*campaigns.ChangesetSpec, error)
	hooks       []func(context.Context, int64) (*campaigns.ChangesetSpec, error)
	history     []ReconcilerStoreGetChangesetSpecByIDFuncCall
	mutex       sync.Mutex
}

// GetChangesetSpecByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) GetChangesetSpecByID(v0 context.Context, v1 int64) (*campaigns.ChangesetSpec, error) {
	r0, r1 := m.GetChangesetSpecByIDFunc.nextHook()(v0, v1)
	m.GetChangesetSpecByIDFunc.appendCall(ReconcilerStoreGetChangesetSpecByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChangesetSpecByID
// method of the parent MockReconcilerStore instance is invoked and the hook
// queue is empty.
func (f *ReconcilerStoreGetChangesetSpecByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*campaigns.ChangesetSpec, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChangesetSpecByID method of the parent MockReconcilerStore instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReconcilerStoreGetChangesetSpecByIDFunc) PushHook(hook func(context.Context, int64) (*campaigns.ChangesetSpec, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreGetChangesetSpecByIDFunc) SetDefaultReturn(r0 *campaigns.ChangesetSpec, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*campaigns.ChangesetSpec, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreGetChangesetSpecByIDFunc) PushReturn(r0 *campaigns.ChangesetSpec, r1 error) {
	f.PushHook(func(context.Context, int64) (*campaigns.ChangesetSpec, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreGetChangesetSpecByIDFunc) nextHook() func(context.Context, int64) (*campaigns.ChangesetSpec, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreGetChangesetSpecByIDFunc) appendCall(r0 ReconcilerStoreGetChangesetSpecByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreGetChangesetSpecByIDFuncCall
// objects describing the invocations of this function.
func (f *ReconcilerStoreGetChangesetSpecByIDFunc) History() []ReconcilerStoreGetChangesetSpecByIDFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreGetChangesetSpecByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreGetChangesetSpecByIDFuncCall is an object that describes
// an invocation of method GetChangesetSpecByID on an instance of
// MockReconcilerStore.
type ReconcilerStoreGetChangesetSpecByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *campaigns.ChangesetSpec
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreGetChangesetSpecByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreGetChangesetSpecByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreHandleFunc describes the behavior when the Handle method
// of the parent MockReconcilerStore instance is invoked.
type ReconcilerStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ReconcilerStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReconcilerStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ReconcilerStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockReconcilerStore instance is invoked and the hook queue is
// empty.
func (f *ReconcilerStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockReconcilerStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReconcilerStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ReconcilerStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreHandleFunc) appendCall(r0 ReconcilerStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ReconcilerStoreHandleFunc) History() []ReconcilerStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockReconcilerStore.
type ReconcilerStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReconcilerStoreListChangesetSyncDataFunc describes the behavior when the
// ListChangesetSyncData method of the parent MockReconcilerStore instance
// is invoked.
type ReconcilerStoreListChangesetSyncDataFunc struct {
	defaultHook func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error)
	hooks       []func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error)
	history     []ReconcilerStoreListChangesetSyncDataFuncCall
	mutex       sync.Mutex
}

// ListChangesetSyncData delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) ListChangesetSyncData(v0 context.Context, v1 ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
	r0, r1 := m.ListChangesetSyncDataFunc.nextHook()(v0, v1)
	m.ListChangesetSyncDataFunc.appendCall(ReconcilerStoreListChangesetSyncDataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListChangesetSyncData method of the parent MockReconcilerStore instance
// is invoked and the hook queue is empty.
func (f *ReconcilerStoreListChangesetSyncDataFunc) SetDefaultHook(hook func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListChangesetSyncData method of the parent MockReconcilerStore instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReconcilerStoreListChangesetSyncDataFunc) PushHook(hook func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreListChangesetSyncDataFunc) SetDefaultReturn(r0 []campaigns.ChangesetSyncData, r1 error) {
	f.SetDefaultHook(func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreListChangesetSyncDataFunc) PushReturn(r0 []campaigns.ChangesetSyncData, r1 error) {
	f.PushHook(func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreListChangesetSyncDataFunc) nextHook() func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreListChangesetSyncDataFunc) appendCall(r0 ReconcilerStoreListChangesetSyncDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ReconcilerStoreListChangesetSyncDataFuncCall objects describing the
// invocations of this function.
func (f *ReconcilerStoreListChangesetSyncDataFunc) History() []ReconcilerStoreListChangesetSyncDataFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreListChangesetSyncDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreListChangesetSyncDataFuncCall is an object that describes
// an invocation of method ListChangesetSyncData on an instance of
// MockReconcilerStore.
type ReconcilerStoreListChangesetSyncDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListChangesetSyncDataOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []campaigns.ChangesetSyncData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreListChangesetSyncDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreListChangesetSyncDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreListChangesetsFunc describes the behavior when the
// ListChangesets method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreListChangesetsFunc struct {
	defaultHook func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)
	hooks       []func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)
	history     []ReconcilerStoreListChangesetsFuncCall
	mutex       sync.Mutex
}

// ListChangesets delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) ListChangesets(v0 context.Context, v1 ListChangesetsOpts) (campaigns.Changesets, int64, error) {
	r0, r1, r2 := m.ListChangesetsFunc.nextHook()(v0, v1)
	m.ListChangesetsFunc.appendCall(ReconcilerStoreListChangesetsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListChangesets
// method of the parent MockReconcilerStore instance is invoked and the hook
// queue is empty.
func (f *ReconcilerStoreListChangesetsFunc) SetDefaultHook(hook func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListChangesets method of the parent MockReconcilerStore instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReconcilerStoreListChangesetsFunc) PushHook(hook func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreListChangesetsFunc) SetDefaultReturn(r0 campaigns.Changesets, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreListChangesetsFunc) PushReturn(r0 campaigns.Changesets, r1 int64, r2 error) {
	f.PushHook(func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error) {
		return r0, r1, r2
	})
}

func (f *ReconcilerStoreListChangesetsFunc) nextHook() func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreListChangesetsFunc) appendCall(r0 ReconcilerStoreListChangesetsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreListChangesetsFuncCall
// objects describing the invocations of this function.
func (f *ReconcilerStoreListChangesetsFunc) History() []ReconcilerStoreListChangesetsFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreListChangesetsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreListChangesetsFuncCall is an object that describes an
// invocation of method ListChangesets on an instance of
// MockReconcilerStore.
type ReconcilerStoreListChangesetsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListChangesetsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 campaigns.Changesets
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreListChangesetsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreListChangesetsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ReconcilerStoreTransactSyncStoreFunc describes the behavior when the
// TransactSyncStore method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreTransactSyncStoreFunc struct {
	defaultHook func(context.Context) (SyncStore, error)
	hooks       []func(context.Context) (SyncStore, error)
	history     []ReconcilerStoreTransactSyncStoreFuncCall
	mutex       sync.Mutex
}

// TransactSyncStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) TransactSyncStore(v0 context.Context) (SyncStore, error) {
	r0, r1 := m.TransactSyncStoreFunc.nextHook()(v0)
	m.TransactSyncStoreFunc.appendCall(ReconcilerStoreTransactSyncStoreFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TransactSyncStore
// method of the parent MockReconcilerStore instance is invoked and the hook
// queue is empty.
func (f *ReconcilerStoreTransactSyncStoreFunc) SetDefaultHook(hook func(context.Context) (SyncStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TransactSyncStore method of the parent MockReconcilerStore instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReconcilerStoreTransactSyncStoreFunc) PushHook(hook func(context.Context) (SyncStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreTransactSyncStoreFunc) SetDefaultReturn(r0 SyncStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SyncStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreTransactSyncStoreFunc) PushReturn(r0 SyncStore, r1 error) {
	f.PushHook(func(context.Context) (SyncStore, error) {
		return r0, r1
	})
}

func (f *ReconcilerStoreTransactSyncStoreFunc) nextHook() func(context.Context) (SyncStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreTransactSyncStoreFunc) appendCall(r0 ReconcilerStoreTransactSyncStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreTransactSyncStoreFuncCall
// objects describing the invocations of this function.
func (f *ReconcilerStoreTransactSyncStoreFunc) History() []ReconcilerStoreTransactSyncStoreFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreTransactSyncStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreTransactSyncStoreFuncCall is an object that describes an
// invocation of method TransactSyncStore on an instance of
// MockReconcilerStore.
type ReconcilerStoreTransactSyncStoreFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SyncStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreTransactSyncStoreFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreTransactSyncStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReconcilerStoreUpdateChangesetFunc describes the behavior when the
// UpdateChangeset method of the parent MockReconcilerStore instance is
// invoked.
type ReconcilerStoreUpdateChangesetFunc struct {
	defaultHook func(context.Context, *campaigns.Changeset) error
	hooks       []func(context.Context, *campaigns.Changeset) error
	history     []ReconcilerStoreUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) UpdateChangeset(v0 context.Context, v1 *campaigns.Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ReconcilerStoreUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockReconcilerStore instance is invoked and the hook
// queue is empty.
func (f *ReconcilerStoreUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *campaigns.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockReconcilerStore instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReconcilerStoreUpdateChangesetFunc) PushHook(hook func(context.Context, *campaigns.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *campaigns.Changeset) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *campaigns.Changeset) error {
		return r0
	})
}

func (f *ReconcilerStoreUpdateChangesetFunc) nextHook() func(context.Context, *campaigns.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreUpdateChangesetFunc) appendCall(r0 ReconcilerStoreUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReconcilerStoreUpdateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ReconcilerStoreUpdateChangesetFunc) History() []ReconcilerStoreUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreUpdateChangesetFuncCall is an object that describes an
// invocation of method UpdateChangeset on an instance of
// MockReconcilerStore.
type ReconcilerStoreUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *campaigns.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReconcilerStoreUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReconcilerStoreUpsertChangesetEventsFunc describes the behavior when the
// UpsertChangesetEvents method of the parent MockReconcilerStore instance
// is invoked.
type ReconcilerStoreUpsertChangesetEventsFunc struct {
	defaultHook func(context.Context, ...*campaigns.ChangesetEvent) error
	hooks       []func(context.Context, ...*campaigns.ChangesetEvent) error
	history     []ReconcilerStoreUpsertChangesetEventsFuncCall
	mutex       sync.Mutex
}

// UpsertChangesetEvents delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockReconcilerStore) UpsertChangesetEvents(v0 context.Context, v1 ...*campaigns.ChangesetEvent) error {
	r0 := m.UpsertChangesetEventsFunc.nextHook()(v0, v1...)
	m.UpsertChangesetEventsFunc.appendCall(ReconcilerStoreUpsertChangesetEventsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpsertChangesetEvents method of the parent MockReconcilerStore instance
// is invoked and the hook queue is empty.
func (f *ReconcilerStoreUpsertChangesetEventsFunc) SetDefaultHook(hook func(context.Context, ...*campaigns.ChangesetEvent) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertChangesetEvents method of the parent MockReconcilerStore instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReconcilerStoreUpsertChangesetEventsFunc) PushHook(hook func(context.Context, ...*campaigns.ChangesetEvent) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReconcilerStoreUpsertChangesetEventsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*campaigns.ChangesetEvent) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReconcilerStoreUpsertChangesetEventsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*campaigns.ChangesetEvent) error {
		return r0
	})
}

func (f *ReconcilerStoreUpsertChangesetEventsFunc) nextHook() func(context.Context, ...*campaigns.ChangesetEvent) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReconcilerStoreUpsertChangesetEventsFunc) appendCall(r0 ReconcilerStoreUpsertChangesetEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ReconcilerStoreUpsertChangesetEventsFuncCall objects describing the
// invocations of this function.
func (f *ReconcilerStoreUpsertChangesetEventsFunc) History() []ReconcilerStoreUpsertChangesetEventsFuncCall {
	f.mutex.Lock()
	history := make([]ReconcilerStoreUpsertChangesetEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReconcilerStoreUpsertChangesetEventsFuncCall is an object that describes
// an invocation of method UpsertChangesetEvents on an instance of
// MockReconcilerStore.
type ReconcilerStoreUpsertChangesetEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*campaigns.ChangesetEvent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ReconcilerStoreUpsertChangesetEventsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReconcilerStoreUpsertChangesetEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
