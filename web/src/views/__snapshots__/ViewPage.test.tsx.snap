// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewPage renders view 1`] = `
<div>
  <PageTitle
    title="t"
  />
  <h1>
    t
  </h1>
  <ViewContent
    caseSensitive={false}
    copyQueryButton={false}
    history="[History]"
    location="[Location path=/]"
    patternType="literal"
    setCaseSensitivity={[Function]}
    setPatternType={[Function]}
    settingsCascade={
      Object {
        "final": Object {},
        "subjects": Array [],
      }
    }
    viewContent={
      Array [
        Object {
          "kind": "markdown",
          "value": "**a**",
        },
        Object {
          "kind": "plaintext",
          "value": "*b*",
        },
        Object {
          "value": "*c*",
        },
        Object {
          "component": "QueryInput",
          "props": Object {
            "implicitQueryPrefix": "x",
          },
        },
      ]
    }
  >
    <div
      className="view-content"
    >
      <Markdown
        className="view-content__markdown mb-1"
        dangerousInnerHTML="<p><strong>a</strong></p>
"
        history="[History]"
      >
        <div
          className="view-content__markdown mb-1 markdown"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<p><strong>a</strong></p>
",
            }
          }
          onClick={[Function]}
        />
      </Markdown>
      *b*
      <Markdown
        className="view-content__markdown mb-1"
        dangerousInnerHTML="<p><em>c</em></p>
"
        history="[History]"
      >
        <div
          className="view-content__markdown mb-1 markdown"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<p><em>c</em></p>
",
            }
          }
          onClick={[Function]}
        />
      </Markdown>
      <QueryInputInViewContent
        caseSensitive={false}
        copyQueryButton={false}
        history="[History]"
        implicitQueryPrefix="x"
        key="3"
        location="[Location path=/]"
        patternType="literal"
        setCaseSensitivity={[Function]}
        setPatternType={[Function]}
        settingsCascade={
          Object {
            "final": Object {},
            "subjects": Array [],
          }
        }
      />
    </div>
  </ViewContent>
</div>
`;

exports[`ViewPage view is loading 1`] = `
<LoadingSpinner
  className="icon-inline"
/>
`;

exports[`ViewPage view not found 1`] = `
<div
  className="alert alert-danger"
>
  View not found: 
  <code>
    v
  </code>
</div>
`;
